#Establishing variables
x<-dataHeatMap$ImpSurfGroup_Percent
y<-dataHeatMap$Buffer
N<-dataHeatMap$No.Sites
z<-dataHeatMap$AvgTempC.Min
#Drawing heat graph through interpolation
#used cubic interpolation between points (x,y,z)
#install.packages("akima")
# Plot barplot from scratch
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size\n(km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"), cex.axis=1) #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1) #y
#text(x=0.6, y=0.24, labels=expression(paste("(", bold(a), ")")), cex=1.8)
box()
#Drawing heat graph through interpolation
#used cubic interpolation between points (x,y,z)
#install.packages("akima")
library(akima)
require(akima)
resolution <- 0.01
a <- interp(x=x, y=y, z=z,
xo=seq(min(x),100,by=resolution),
yo=seq(0,2.5,by=resolution),
duplicate="mean")                     #takes mean of duplicate (x,y) values
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
contour(a, add=TRUE, col="gray")
#Draw data points with sample size
points(x,y,pch=20,cex=N)
?inter
?interp
dataHeatMap <- read.csv("~/Dropbox/UMich Research/'14 (UL) Urban Gardens - Lima Bean/DATA/csv's for R Analysis/UL DataIMAGES HeatMap_MinTemp and ImpSurf.csv", header=T)
dataHeatMap <- dataHeatMap[-c(29:40),]
#Modifying variables
dataHeatMap$ImpSurfGroup_Percent<-dataHeatMap$ImpSurfGroup*100 #making ImpSurf variable a percent value
#Establishing variables
x<-dataHeatMap$ImpSurfGroup_Percent
y<-dataHeatMap$Buffer
N<-dataHeatMap$No.Sites
z<-dataHeatMap$AvgTempC.Min
# Plot barplot from scratch
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size\n(km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"), cex.axis=1) #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1) #y
#text(x=0.6, y=0.24, labels=expression(paste("(", bold(a), ")")), cex=1.8)
box()
#Drawing heat graph through interpolation
#used cubic interpolation between points (x,y,z)
#install.packages("akima")
library(akima)
require(akima)
resolution <- 0.01
a <- interp(x=x, y=y, z=z,
xo=seq(min(x),100,by=resolution),
yo=seq(0,2.5,by=resolution),
duplicate="mean")                     #takes mean of duplicate (x,y) values
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
contour(a, add=TRUE, col="gray")
#Draw data points with sample size
points(x,y,pch=20,cex=N)
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size\n(km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"), cex.axis=1) #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1) #y
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
?points
points(x,y,pch=20,cex=N,color="azure3")
points(x,y,pch=20,cex=N,col="azure3")
points(x,y,pch=19,cex=N,col="azure3")
points(x,y,pch=20,cex=N,bg="azure3")
points(x,y,pch=20,cex=N,col="azure3")
?axis
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size\n(km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"),
cex.axis=1, col="gray59", col.ticks="gray59") #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1,
col="gray59", col.ticks="gray59") #y
points(x,y,pch=20,cex=N,col="azure3")
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size(km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"),
cex.axis=1, col="gray59", col.ticks="gray59") #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1,
col="gray59", col.ticks="gray59") #y
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
contour(a, add=TRUE, col="firebrick4")
points(x,y,pch=20,cex=N,col="azure3")
?contour
contour(a, add=TRUE, col="firebrick4", labcex=1.5)
contour(a, add=TRUE, col="firebrick4", labcex=1.1)
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size (km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"),
cex.axis=1, col="gray59", col.ticks="gray59") #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1,
col="gray59", col.ticks="gray59") #y
#Drawing heat graph through interpolation
#used cubic interpolation between points (x,y,z)
#install.packages("akima")
library(akima)
require(akima)
resolution <- 0.01
a <- interp(x=x, y=y, z=z,
xo=seq(min(x),100,by=resolution),
yo=seq(0,2.5,by=resolution),
duplicate="mean")                     #takes mean of duplicate (x,y) values
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
contour(a, add=TRUE, col="firebrick4", labcex=1.03)
#Draw data points with sample size
points(x,y,pch=20,cex=N,col="azure3")
contour(a, add=TRUE, col="firebrick4", labcex=1.01)
contour(a, add=TRUE, col="firebrick4", labcex=1.005)
?text
text(30,0.75,"expression(paste("mean Minimum Daily \nTemperature (",degree,"C)"))")
text(30,0.75,expression(paste("mean Minimum Daily \nTemperature (",degree,"C)")))
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size Around Garden (km)", line=2.5, cex=1.1) #ylabel
mtext(side=1,"Impervious Surface (%)", line=2.5, cex=1.1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"),
cex.axis=1, col="gray59", col.ticks="gray59") #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1,
col="gray59", col.ticks="gray59") #y
#Drawing heat graph through interpolation
#used cubic interpolation between points (x,y,z)
#install.packages("akima")
library(akima)
require(akima)
resolution <- 0.01
a <- interp(x=x, y=y, z=z,
xo=seq(min(x),100,by=resolution),
yo=seq(0,2.5,by=resolution),
duplicate="mean")                     #takes mean of duplicate (x,y) values
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
contour(a, add=TRUE, col="firebrick4", labcex=1.005)
#Draw data points with sample size
points(x,y,pch=20,cex=N,col="azure3")
plot.new()
par(mar=c(5,5,4,4))	#number of margin lines on each side of plot (bottom, L, top, R)
mtext(side=2,"Buffer Size \nAround Garden (km)", line=2.5, cex=1) #ylabel
mtext(side=1,"Area of Impervious Surface", line=2.5, cex=1) #xlabel
plot.window(xlim=c(0,105), ylim=c(0.35,2.25))
axis(side=1, at=seq(0, 100, by=20), labels=c("0%", "20%", "40%", "60%","80%","100%"),
cex.axis=1, col="gray59", col.ticks="gray59") #x
axis(side=2, at=seq(0.5, 2, by=0.5), labels=T, las=2, cex.axis=1,
col="gray59", col.ticks="gray59") #y
image(a, col=rev(heat.colors(9)),add=TRUE) #rev reverses the colors
contour(a, add=TRUE, col="firebrick4", labcex=1.005)
#Draw data points with sample size
points(x,y,pch=20,cex=N,col="azure3")
View(dataULfPod)
View(dataULfPlant)
sapply(packs[1:4], library, character.only=T)
packs = c('magrittr', 'plyr','dplyr', 'tidyr','rvest', 'stringr' ,'leaflet', 'ggvis')
sapply(packs, install.packages, dependencies=T, repos="https://cran.rstudio.com/")
sapply(packs[1:4], library, character.only=T)
dataULfPod %>%
names
?select
View(dataULfPod)
dataULfPod %>%
filter(BeanCt == 1) %>%
hist
dataULfPod %>%
filter(BeanCt = 1) %>%
summary
?filter
dataULfPod %>%
filter(BeanCt == 1) %>%
summary
names(dataULfPod)
dataULfPod %>%
filter(BeanCt == 1) %>%
hist(AvgTemp.Min)
?hist
dataULfPod %>%
filter(BeanCt == 1) %>%
hist
hist(AvgTemp.Min[dataULfPod$BeanCt==1])
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1])
par(mfrow=c(4,1))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4")
par(mfrow=c(1,1))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3")
?hist
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=c(54,56,58,60,62,64))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=c(54,56,58,60,62,64))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3", breaks=c(54,56,58,60,62,64))
require(utils) # for str
str(hist(islands, breaks = 12, plot =  FALSE)) #-> 10 (~= 12) breaks
str(hist(islands, breaks = c(12,20,36,80,200,1000,17000), plot = FALSE))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4", breaks=c(54,56,58,60,62,64))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4")
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4", breaks=12)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3", breaks=12)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,12))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,14))
median(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1])
median(as.numeric(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1]))
mean(as.numeric(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1]))
dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1]
mean(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], na.rm=TRUE)
mean2<-mean(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], na.rm=TRUE)
mean3<-mean(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], na.rm=TRUE)
mean4<-mean(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], na.rm=TRUE)
mean1<-mean(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], na.rm=TRUE)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12)
points(mean1,0,pch=21)
points(mean1,0,pch=20)
points(mean1,0,pch=19)
points(mean1,0,pch=19,cex=1.5)
par(mfrow=c(4,1))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,30))
?par
par(mfrow=c(4,1))
par(mar=c(1,1,1,1)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,30))
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=12, ylim=c(0,30))
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3", breaks=12, ylim=c(0,30))
points(mean3,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4", breaks=12, ylim=c(0,30))
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(4,1))
par(mar=c(0,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,30))
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=12, ylim=c(0,30))
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3", breaks=12, ylim=c(0,30))
points(mean3,0,pch=19,cex=1.5)
par(mar=c(3,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4", breaks=12, ylim=c(0,30))
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(1,1))
mean1<-median(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], na.rm=TRUE)
mean2<-median(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], na.rm=TRUE)
mean3<-median(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], na.rm=TRUE)
mean4<-median(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], na.rm=TRUE)
par(mfrow=c(4,1))
par(mar=c(0,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,30))
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=12, ylim=c(0,30))
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3", breaks=12, ylim=c(0,30))
points(mean3,0,pch=19,cex=1.5)
par(mar=c(3,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4", breaks=12, ylim=c(0,30))
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(1,1))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=12, ylim=c(0,30))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=12, ylim=c(0,50))
par(mfrow=c(4,1))
par(mar=c(0,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1", breaks=12, ylim=c(0,45))
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2", breaks=12, ylim=c(0,45))
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3", breaks=12, ylim=c(0,45))
points(mean3,0,pch=19,cex=1.5)
par(mar=c(3,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4", breaks=12, ylim=c(0,45))
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(1,1))
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1",
breaks=12, ylim=c(0,50), main=NULL)
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
par(mfrow=c(4,1))
par(mar=c(0,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean3,0,pch=19,cex=1.5)
par(mar=c(3,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(1,1))
par(mfrow=c(4,1))
par(mar=c(2,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean3,0,pch=19,cex=1.5)
par(mar=c(3,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4",
breaks=12, ylim=c(0,50), main=NULL)
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(1,1))
par(mfrow=c(4,1))
par(mar=c(1,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==1], xlab="Bean Count = 1",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean1,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==2], xlab="Bean Count = 2",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean2,0,pch=19,cex=1.5)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==3], xlab="Bean Count = 3",
breaks=12, ylim=c(0,50), main=NULL, xaxt='n')
points(mean3,0,pch=19,cex=1.5)
par(mar=c(4,2,0,0)) # number of margin lines on each side of plot (bottom, L, top, R)
hist(dataULfPod$AvgTemp.Min[dataULfPod$BeanCt==4], xlab="Bean Count = 4",
breaks=12, ylim=c(0,50), main=NULL)
points(mean4,0,pch=19,cex=1.5)
par(mfrow=c(1,1))
opts_template()
? opts_template()
?knitr
dataUB_estS <- file.choose()
opar <- par()
dataUB_estS <- read.csv("~/Dropbox/UMich Research/PROJ_UB_UrbanBeeDiversityProject/urbanbees/Data/EstimateS/2014_EstimateS_Results.csv", header=TRUE)
getwd()
dataUB_estS <- read.csv("~/Dropbox/UMich_Research/PROJ_UB_UrbanBeeDiversityProject/urbanbees/Data/EstimateS/2014_EstimateS_Results.csv", header=TRUE)
names(dataUB_estS)
max(dataUB_estS$Individuals, na.rm="TRUE")
min(dataUB_estS$Individuals, na.rm="TRUE")
max(dataUB_estS$S.est., na.rm="TRUE")
plot(c(0,300),c(0,50))
plot(c(0,300), c(0.50), xlim=c(0,300),ylim=c(0,50), type="n")
plot(c(0,300), c(0,50), xlim=c(0,300),ylim=c(0,50), type="n")
plot(c(0,300), c(0,50), xlim=c(0,300),ylim=c(0,50), xlab="No. of Individuals", ylab="S.est",type="n")
?round
xmax<-round(max(dataUB_estS$Individuals, na.rm="TRUE")) #298 individuals (300)
xmax<-round(max(dataUB_estS$Individuals, na.rm="TRUE"), digits=-2) #298 individuals (300)
xmax<-ceiling(max(dataUB_estS$Individuals, na.rm="TRUE"), digits=-2) #298 individuals (300)
xmax<-ceiling(max(dataUB_estS$Individuals, na.rm="TRUE")) #298 individuals (300)
xmax<-round(max(dataUB_estS$Individuals, na.rm="TRUE"),digit=-2) #298 individuals (300)
ymax<-round(max(dataUB_estS$S.est., na.rm="TRUE"), digit=-2) #49 species richness (50)
xmax<-round(max(dataUB_estS$Individuals, na.rm="TRUE"),digit=-1) #298 individuals (300)
ymax<-round(max(dataUB_estS$S.est., na.rm="TRUE"), digit=-1) #49 species richness (50)
plot(c(0,xmax), c(0,ymax), xlab="No. of Individuals", ylab="S.est",type="n")
xmax<-ceiling(max(dataUB_estS$Individuals, na.rm="TRUE")/10) * 10 #298 individuals (300)
ymax<-ceiling(max(dataUB_estS$S.est., na.rm="TRUE")/10) #49 species richness (50)
ymax<-ceiling(max(dataUB_estS$S.est., na.rm="TRUE")/10) * 10 #49 species richness (50)
palette() #show the current order of colors
palette(rainbow(6)) #set colors
palette() #show the current order of colors
palette(c("green","brown","red")) #set user defined colors
palette() #shows how current order of colors has been re-ordered
identify(x,y,labels=labelfield) #label points interactively
census <- read.csv(file.choose()) #read in the csv file
identify(x,y,labels=labelfield) #label points interactively
names(census)
identify(area,population,labels=name, data=census) #label points interactively
x <- census$area
y <- census$population
labelfield <- census$name
identify(x,y,labels=labelfield) #label points interactively
labelfield <- census$name
plot()
identify(x,y,labels=labelfield) #label points interactively
plot(x,y)
identify(x,y,labels=labelfield) #label points interactively
identify(x,y,labels=labelfield) #label points interactively #click on points to be labeled, press 'esc' key to see results
getwd()
setwd("~/Dropbox/UMich_Jobs/2016-09_Visualization_Internship/datavis_r")
?image
install.packages("rmarkdown")
install.packages("rmarkdown")
library(rmarkdown)
View(census)
range(census)
?range
range(census$rent)
class(census)
max(census$rent)
min(census$rent)
(10-1)*(census$rent - min(census$rent) / max(census$rent) - min(census$rent)) + 1
(10-1) * ( (census$rent - min(census$rent)) / (max(census$rent) - min(census$rent)) ) + 1
names(census) #see all header (column) names
?cos
?log10
census$pop_density <- census$population/census$area
log(census$pop_density)
?aggregate
median(census$population)
median(log(census$population))
var(census$population)
sd(census$population)
hist(census$unemploy,xlab="Unemployment",main="Histogram of Unemployment by County in Michigan")
hist(census$unemploy,xlab="Unemployment",main="Histogram of Unemployment by County \nin Michigan")
hist(census$unemploy)
hist(census$unemploy,xlab="Unemployment",main="Histogram of Unemployment by County \nin Michigan") # inserting better x-axis label (xlab parameter) and title (main parameter)
?hist
hist(census$unemploy,xlab="Unemployment",main="Histogram of Unemployment by County \nin Michigan", breaks=10) #by adding breaks as a parameter we can increase or decrease the bin-size
hist(census$unemploy,xlab="Unemployment",main="Histogram of Unemployment by County \nin Michigan")
boxplot(census$name)
boxplot(census$population)
boxplot(census$area)
names(census)
boxplot(census$area, main="Boxplot of County Area")
boxplot(census[,12],census[,13],col="lightblue",names=c("men","women"),main="Median Income by Sex For Population\nThat Worked Full-time Last 12 Months\nby County ACS 2006-2010")
boxplot(census$area, main="County Area")
boxplot(census$area, main="County Area ACS 2006-2010")
hist(census$unemploy)
boxplot(census$area, main="County Area ACS 2006-2010")
View(census)
opar <- par() #save original graphics settings
names(census)
boxplot(census$pop_density, main="Average Population Density of Michigan Counties \nACS 2006-2010")
boxplot(census$pop_density, main="Average Population Density \nof Michigan Counties \nACS 2006-2010")
boxplot(census$hh_income, main="Average Household Income\nacross Michigan Counties \nACS 2006-2010") #'\n' signals a break into a new line
hist(census$region)
boxplot(census$region, main="Average Household Income\nacross Michigan Counties \nACS 2006-2010") #'\n' signals a break into a new line
boxplot(census[,12],census[,13],col="lightblue",names=c("men","women"),main="Median Income by Sex For Population\nThat Worked Full-time Last 12 Months\nby County ACS 2006-2010")
boxplot(census$hh_income, main="Median Household Income\nacross Michigan Counties \nACS 2006-2010") #'\n' signals a break into a new line
boxplot(census[,12],census[,13],col="lightblue",names=c("men","women"),main="Median Income by Sex For Population\nThat Worked Full-time Last 12 Months\nby County ACS 2006-2010")
boxplot(hh_income ~ region,data=census, col="lightgreen", main="Median Income by Region\nby County ACS 2006-2010") #this will give us household in come by region
boxplot(region ~ hh_income)
boxplot(region ~ hh_income, data=census)
?boxplot
boxplot(census[,12],census[,13],col="lightblue",names=c("men","women"),main="Median Income by Sex For Population\nThat Worked Full-time Last 12 Months\nby County ACS 2006-2010")
names(census)
boxplot(hh_income ~ region,data=census, col="lightgreen", main="Median Income by Region\nby County ACS 2006-2010") #this will give us household in come by region
boxplot(census[,12],census[,13],col="lightblue",names=c("men","women"),main="Median Income by Sex For Population\nThat Worked Full-time Last 12 Months\nby County ACS 2006-2010")
plot(census$unemploy,census$hh_income)
plot(census$unemploy,census$hh_income, cex=1.5)
plot(census$hh_income, log(census$population,2))
plot(census$unemploy,census$hh_income, cex=1.5)
plot(census$unemploy,census$hh_income, cex=1.5)
knitr::opts_chunk
plot(census$hh_income, census$population/census$area)
plot(c(0,max(census$rent)),c(0,max(census$hh_income)),type="n") #create a blank canvas
points(upper$rent,upper$hh_income,pch=20,col="blue")
points(central$rent,central$hh_income,pch=20,col="red")
points(lower$rent,lower$hh_income,pch=20,col="green")
upper <- census[census$region=="upper",] #note the comma after the conditional!
central <- census[census$region=="central",] #without the comma it defaults to the second part
lower <- census[census$region=="south",]
plot(c(0,max(census$rent)),c(0,max(census$hh_income)),type="n") #create a blank canvas
points(upper$rent,upper$hh_income,pch=20,col="blue")
points(central$rent,central$hh_income,pch=20,col="red")
points(lower$rent,lower$hh_income,pch=20,col="green")
plot(c(0,max(census$rent)),c(0,max(census$hh_income)),type="n") #create a blank canvas
#we can also build up a plot by using the points function i.e.
plot(c(0,max(census$rent)),c(0,max(census$hh_income)),
type="n", xlab="Rent", ylab="Median Household Income") #create a blank canvas ('type' parameter) and add axis labels ('xlab' and 'ylab' parameters)
points(upper$rent,upper$hh_income,pch=20,col="blue")
points(central$rent,central$hh_income,pch=20,col="red")
points(lower$rent,lower$hh_income,pch=20,col="green")
legend("topleft", c("upper","central","lower"), pch=20, pt.bg=c("blue","red","green"), main="Region")
?legend
legend("topleft", c("upper","central","lower"), pch=20, pt.bg=c("blue","red","green"), title ="Region")
legend("topleft", c("upper","central","lower"), pch=20, col=c("blue","red","green"), title ="Region")
legend("topleft", c("upper","central","lower"), pch=20, col=c("blue","red","green"), title ="Region", box.lwd = 200)
legend("topleft", c("upper","central","lower"), pch=20, col=c("blue","red","green"), title ="Region", bty="n")
plot(c(0,max(census$rent)),c(0,max(census$hh_income)),
type="n", xlab="Rent", ylab="Median Household Income") #create a blank canvas ('type' parameter) and add axis labels ('xlab' and 'ylab' parameters)
points(upper$rent,upper$hh_income,pch=20,col="blue")
points(central$rent,central$hh_income,pch=20,col="red")
points(lower$rent,lower$hh_income,pch=20,col="green")
legend("topleft", c("upper","central","lower"), pch=20, col=c("blue","red","green"), title ="Region", bty="n")
legend("bottomright", c("upper","central","lower"), pch=20, col=c("blue","red","green"), title ="Region", bty="n")
plot(c(0,max(census$rent)),c(0,max(census$hh_income)),
type="n", xlab="Rent", ylab="Median Household Income") #create a blank canvas ('type' parameter) and add axis labels ('xlab' and 'ylab' parameters)
points(upper$rent,upper$hh_income,pch=20,col="blue")
points(central$rent,central$hh_income,pch=20,col="red")
points(lower$rent,lower$hh_income,pch=20,col="green")
legend("topleft", c("upper","central","lower"), pch=20, col=c("blue","red","green"), title ="Region", bty="n")
names(census[,12])
names(census[,13])
names(census)
plot(census$hh_income, log(census$population,2))
plot(census$hh_income, log(census$population,2))
